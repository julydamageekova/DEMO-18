#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void IS_BRIDGE(int v, int to, int& S, bool* used1,vector<vector<int> >& G){
cout << endl << " : " << v <<" - " << to << endl;
if(!used1[v])
    S = S + G[v].size();
if(!used1[to])
    S = S + G[to].size();
used1[v] = 1;
used1[to] = 1;
}

void dfs (bool* used, int v, int p, int* tin,int* fup,int timer, vector<vector<int> >& G, int& S, bool* used1) {
	used[v] = true; //вершина посещена
	tin[v] = fup[v] = timer++; // t (in) - время "входа" f (up) - время "выхода"
	for (size_t i=0; i < G[v].size(); ++i) {
		int to = G[v][i];
		if (to == p)  continue;
		if (used[to])
			fup[v] = min (fup[v], tin[to]); // миним время выхода из себя и времени входа в своих потомков
		else {
			dfs (used,to,v,tin,fup, timer, G,S,used1);
			fup[v] = min (fup[v], fup[to]);  // миним время выхода из себя и своих потомков
			if (fup[to] > tin[v]) // если соединены простым ребром, то оно мост
                IS_BRIDGE(v,to,S, used1,G);
		}
	}
}

int main(){
    int n,m,v,u;
    cout <<" Number of vertices "; cin >> n;
    cout <<" Number of edges "; cin >> m;
    cout <<" Incidence edges" << endl;
    vector <vector<int> > G(n);
    for (int i = 0; i < m; i++){
        cin >> v >> u;
       G[v].push_back(u);
       G[u].push_back(v);
    }
   for(int i = 0;i < G.size();i++){
    sort(G[i].begin(),G[i].end());
   cout << i << " : ";
    for(int j = 0; j < G[i].size(); j++)
        cout << G[i][j] << ",";
    cout<<endl;

   }

   int timer = 0;
   bool used[n];
   bool used1[n];
   int tin[n], fup[n];
	for (int i=0; i<n; ++i){
		used[i] = false;
		used1[i] = false;
	}
	int S = 0;
	dfs (used,0,-1,tin,fup, timer, G, S,used1);
	cout << "S = " << S << endl;
    return 0;
}
